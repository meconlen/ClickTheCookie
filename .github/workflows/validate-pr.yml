name: Validate PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick python3-json-tool jq
        
    - name: Validate file structure
      run: |
        echo "Validating project structure..."
        
        # Check required files exist
        required_files=("manifest.json" "popup.html" "popup.js" "content.js" "build.sh")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required file missing: $file"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done
        
        # Check icons directory
        if [ ! -d "icons" ]; then
          echo "‚ùå Icons directory missing"
          exit 1
        else
          echo "‚úÖ Found: icons/ directory"
        fi
        
    - name: Validate JSON syntax
      run: |
        echo "Validating JSON files..."
        
        # Validate manifest.json
        if python3 -m json.tool manifest.json > /dev/null; then
          echo "‚úÖ manifest.json is valid JSON"
        else
          echo "‚ùå manifest.json has invalid JSON syntax"
          exit 1
        fi
        
        # Validate package.json if it exists
        if [ -f "package.json" ]; then
          if python3 -m json.tool package.json > /dev/null; then
            echo "‚úÖ package.json is valid JSON"
          else
            echo "‚ùå package.json has invalid JSON syntax"
            exit 1
          fi
        fi
        
    - name: Validate manifest structure
      run: |
        echo "Validating manifest.json structure..."
        
        # Check required manifest fields
        required_fields=("name" "version" "manifest_version" "description")
        for field in "${required_fields[@]}"; do
          if jq -e ".$field" manifest.json > /dev/null; then
            value=$(jq -r ".$field" manifest.json)
            echo "‚úÖ $field: $value"
          else
            echo "‚ùå Missing required field: $field"
            exit 1
          fi
        done
        
        # Validate manifest version
        manifest_version=$(jq -r '.manifest_version' manifest.json)
        if [ "$manifest_version" != "2" ] && [ "$manifest_version" != "3" ]; then
          echo "‚ùå Invalid manifest_version: $manifest_version (should be 2 or 3)"
          exit 1
        fi
        
    - name: Check for sensitive information
      run: |
        echo "Checking for sensitive information..."
        
        # Check for common sensitive patterns
        if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.json" --include="*.html" .; then
          echo "‚ö†Ô∏è  Potential sensitive information found. Please review."
        else
          echo "‚úÖ No obvious sensitive information detected"
        fi
        
    - name: Test build process
      run: |
        echo "Testing build process..."
        chmod +x build.sh
        ./build.sh
        
        if [ -f "click-the-cookie.zip" ]; then
          echo "‚úÖ Build successful - extension package created"
          
          # Show package size
          size=$(du -h click-the-cookie.zip | cut -f1)
          echo "üì¶ Package size: $size"
          
          # Test zip integrity
          if unzip -t click-the-cookie.zip > /dev/null; then
            echo "‚úÖ Extension package integrity verified"
          else
            echo "‚ùå Extension package is corrupted"
            exit 1
          fi
        else
          echo "‚ùå Build failed - no extension package created"
          exit 1
        fi
        
    - name: Validate HTML
      run: |
        echo "Validating HTML files..."
        
        # Basic HTML validation for popup.html
        if grep -q "<!DOCTYPE html>" popup.html; then
          echo "‚úÖ popup.html has DOCTYPE declaration"
        else
          echo "‚ö†Ô∏è  popup.html missing DOCTYPE declaration"
        fi
        
        if grep -q "<html>" popup.html && grep -q "</html>" popup.html; then
          echo "‚úÖ popup.html has proper HTML structure"
        else
          echo "‚ùå popup.html missing HTML tags"
          exit 1
        fi
        
    - name: Summary
      run: |
        echo "üéâ All validation checks passed!"
        echo "The PR is ready for review."
